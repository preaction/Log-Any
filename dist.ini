name    = Log-Any
abstract = Bringing loggers and listeners together
author  = Jonathan Swartz <swartz@pobox.com>
author  = David Golden <dagolden@cpan.org>
author  = Doug Bell <preaction@cpan.org>
author  = Daniel Pittman <daniel@rimspace.net>
author  = Stephen Thirlwall <sdt@cpan.org>
license = Perl_5
copyright_year   = 2017
copyright_holder = Jonathan Swartz, David Golden, and Doug Bell

[Authority]
authority  = cpan:PREACTION
do_munging = 0

[GithubMeta]
issues = 1
[MetaResources]

; --- Module management
[@Filter]
-bundle = @Basic
; GatherDir must be configured separately
-remove = GatherDir
-remove = Readme

[Readme::Brief]
[ReadmeAnyFromPod]
location = root
filename = README.mkdn
type = markdown

[PodSyntaxTests]
[PodWeaver]
replacer = replace_with_comment
post_code_replacer = replace_with_nothing
[RewriteVersion]
[CPANFile]
[MetaJSON]
[MetaProvides::Package]
[MetaNoIndex]
directory = t
directory = xt
directory = inc
directory = share
directory = eg
directory = examples
package = Log::Any::Manager::_Guard
[Git::Contributors]
; authordep Pod::Weaver::Section::Contributors
[Test::ReportPrereqs]
[Test::Compile]

; --- Repository management
[Git::GatherDir]
include_dotfiles = 1
prune_directory = ^eg
; Exclude dotfiles in the root directory
exclude_match = ^\.[^/]+$
; Exclude ini files in the root directory
exclude_match = ^[^/]+\.ini$
; Exclude generated root content, which is included by the various plugins
; Without this, we get an error about duplicate content
exclude_filename = cpanfile
exclude_filename = LICENSE
exclude_filename = README
exclude_filename = README.mkdn
exclude_filename = Makefile.PL

[CopyFilesFromBuild]
; Copy generated content to the repository root so users without Dist::Zilla
; can use it
copy = cpanfile
copy = LICENSE
copy = Makefile.PL

[Run::AfterBuild]
; Add travis and coveralls badges to README.mkdn
run = perl -pi -e 's{(# SYNOPSIS)}{# STATUS\n\n<a href="https://travis-ci.org/preaction/Log-Any"><img src="https://travis-ci.org/preaction/Log-Any.svg?branch=master"></a><a href="https://coveralls.io/r/preaction/Log-Any"><img src="https://coveralls.io/repos/preaction/Log-Any/badge.png" alt="Coverage Status" /></a>\n\n$1}' README.mkdn

; --- Git management
[CheckChangesHasContent]
changelog = Changes
[Git::Check]
; Automatically commit these files during release
allow_dirty_match = README.*
allow_dirty_match = .*[.]PL
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = Changes

[Git::Commit / Commit_Dirty_Files]
; Automatically commit with release version and changelog
changelog = Changes
commit_msg = release v%v%n%n%c
allow_dirty_match = README.*
allow_dirty_match = .*[.]PL
allow_dirty = cpanfile
allow_dirty = LICENSE
allow_dirty = Changes
add_files_in = .
[Git::Tag]
changelog = Changes
tag_message = %N v%v - %{yyyy-MM-dd}d%n%n%c ; Tag annotations show up in github release list

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]
filename = Changes
[BumpVersionAfterRelease]

[Git::Commit / Commit_Changes]
commit_msg = incrementing version after release
allow_dirty = Changes
allow_dirty_match = ^lib/.*\.pm$
allow_dirty_match = .*[.]PL
allow_dirty_match = ^bin/
[Git::Push]

; --- Project-specific directives

[Prereqs]
strict = 0
warnings = 0
Carp = 0
Data::Dumper = 0
B = 0
Exporter = 0
constant = 0
IO::File = 0
Fcntl = 0
Test::Builder = 0
Sys::Syslog = 0
File::Basename = 0
Storable = 0
FindBin = 0

[OnlyCorePrereqs]
:version = 0.003
starting_version = 5.008001
skip = version
